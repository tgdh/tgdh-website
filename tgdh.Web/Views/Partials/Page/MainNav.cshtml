@inherits UmbracoViewPage<IPublishedContent>
@{
    var homePage = Model.Site();
    var primaryMenuItems = homePage.Children.Where(x => x.IsVisible() && x.TemplateId > 0 && !x.GetPropertyValue<bool>("isSecondaryNav"));

	var secondaryMenuItems = homePage.Children.Where(x => x.IsVisible() && x.TemplateId > 0 && x.GetPropertyValue<bool>("isSecondaryNav"));
	var aboutPage = Umbraco.TypedContent(TGDH.Core.Constants.aboutPageId);
}

<button class="c-nav-toggle js-nav-toggle" id="nav-toggle" type="button" aria-haspopup="true" data-toggle="mainNavigation">
	<svg class="c-nav-toggle__icon u-icon u-icon--32 u-icon--cross u-icon--invert">
		<use xlink:href="/assets/icons/icons.svg#cross"></use>
	</svg>
	<span class="c-nav-toggle__text">Menu</span>
</button>

<nav id="mainNavigation" class="c-nav c-nav--main js-nav u-font-sec" role="navigation" aria-labelledby="nav-toggle">
	<div class="c-nav__inner">
		@if( primaryMenuItems.Any() ) {
			<ul class="c-nav__list">
		        @foreach (var item in primaryMenuItems)
		        {
		            var modifierClass = item.IsAncestorOrSelf(Model) ? "is-active" : null;

		            <li class="c-nav__item c-nav__item--parent">
		                <a href="@item.Url" class="c-nav__link @modifierClass">
		                    <span class="c-nav__value">@item.Name</span>
		                </a>
		            </li>
		        }
		    </ul>
		}
		@if( secondaryMenuItems.Any() ) {
			<ul class="c-nav__sub">
		        @foreach (var item in secondaryMenuItems)
		        {
		            var modifierClass = item.IsAncestorOrSelf(Model) ? "is-active" : null;
					var pageUrl = item.DocumentTypeAlias == "careers" && aboutPage != null ? aboutPage.Url + "#careers" : item.Url;

		            <li class="c-nav__sub__item">
		                <a href="@pageUrl" class="c-nav__sub__link @modifierClass">
		                    <span class="c-nav__sub__value">@item.Name</span>
		                </a>
		            </li>
		        }
		    </ul>
		}
	</div>
</nav>

@helper Traverse(IPublishedContent node)
{
    const int maxLevelForNav = 3;

    var items = node.Children
        .Where(DocumentTypeIsNotIgnored)
        .Where(x => x.IsVisible() && x.TemplateId > 0 && x.Level <= maxLevelForNav)
        .ToList();

    if (items.Any())
    {
        <ul class="c-nav__list c-nav__list--sub js-nav-sub">
            @foreach (var item in items)
            {
                var activeStateClass = Model.Id == item.Id ? "is-active" : null;

                <li class="c-nav__item">
                    <a href="@item.Url" class="c-nav__link @activeStateClass">
                        @item.Name
                    </a>
                    @Traverse(item)
                </li>
            }
        </ul>
    }
}

@functions {

    private static bool DocumentTypeIsNotIgnored(IPublishedContent arg)
    {
        const string ignoredDocTypes = "errorPage,notFound,generalNews,inTheMedia,pressRelease,post";

        return ignoredDocTypes.Split(',').All(docType => docType != arg.DocumentTypeAlias);
    }

}
