@using Umbraco.Web
@using TGDH.Core.Models
@inherits UmbracoViewPage<IPublishedContent>
@{
    var components = Model.GetPropertyValue<IEnumerable<IPublishedContent>>("pageContent");

    if (components == null)
    {
        return;
    }

    const string wrapSize = "small";
    var pageComponentClass = "o-page-component";
    var wrapClasses = "o-wrap o-wrap--" + wrapSize;

    foreach (var item in components.ToContentSet())
    {
        var alignment = item.HasValue("alignment") ? item.GetPropertyValue<string>("alignment") : "";
        var wrapInExtraDiv =  !alignment.Equals("Full width");
        var aspectRatio = item.GetPropertyValue<string>("aspectRatio");

        if (wrapInExtraDiv)
        {
            var wrapMarkup = "<div class='o-page-component o-wrap o-wrap--" + wrapSize + item.IsFirst(" is-first", "") + " o-page-component--" + item.DocumentTypeAlias + "'>";

            @Html.Raw(wrapMarkup)
        }

        switch (item.DocumentTypeAlias)
        {
            case "gallery":
                var gallery = new GalleryViewModel
                {
                    MediaIds = item.GetPropertyValue<string>("galleryIds"),
                    Alignment = alignment,
                    AspectRatio = aspectRatio,
                    AdditionalClass = pageComponentClass
                };

                @Html.Partial("~/Views/Partials/PageComponents/Gallery.cshtml", gallery)
                break;
            case "singleImage":
                var image = new ImageViewModel
                {
                    ImageId = item.GetPropertyValue<int>("imageId"),
                    Alignment = alignment,
                    AspectRatio = aspectRatio,
                    ImageWidth = 2000,
					AdditionalClass = ""
                };

                @Html.Partial("~/Views/Partials/PageComponents/Image.cshtml", image)
                break;
            case "downloads":
                var downloads = new DownloadsViewModel
                {
                    Heading = item.GetPropertyValue<string>("heading"),
                    MediaIds = item.GetPropertyValue<string>("files"),
                    AdditionalClass = ""
                };

                @Html.Partial("~/Views/Partials/PageComponents/Downloads.cshtml", downloads)
                break;
            case "quote":
                var quote = new QuoteViewModel
                {
                    Quote = item.GetPropertyValue<IHtmlString>("quoteMessage"),
                    Source = item.GetPropertyValue<string>("source"),
                    Alignment = alignment,
                    AdditionalClass = ""
                };

                @Html.Partial("~/Views/Partials/PageComponents/Quote.cshtml", quote)
                break;
            case "embed":
                var embed = new EmbedViewModel
                {
                    EmbedCode = item.GetPropertyValue<string>("embedCode"),
                    Alignment = alignment,
                    AdditionalClass = ""
                };

                @Html.Partial("~/Views/Partials/PageComponents/Embed.cshtml", embed)
                break;
            case "textarea":
				@item.GetPropertyValue("text")
				@*
                var text = new TextareaViewModel
                {
                    Text = item.GetPropertyValue<IHtmlString>("text")
                };

                @Html.Partial("~/Views/Partials/PageComponents/Textarea.cshtml", text)
				*@
                break;
            case "accordion":
            case "tabs":
                var tabList = new TabListViewModel
                {
                    Tabs = new List<TabViewModel>(),
                    AdditionalClass = pageComponentClass
                };

                if (item.GetPropertyValue<IEnumerable<IPublishedContent>>("content") != null)
                {
                    foreach (var entry in item.GetPropertyValue<IEnumerable<IPublishedContent>>("content"))
                    {
                        if (entry != null)
                        {
                            tabList.Tabs.Add(new TabViewModel
                            {
                                Heading = entry.GetPropertyValue<string>("heading"),
                                Content = entry.GetPropertyValue<IHtmlString>("content")
                            });
                        }
                    }
                }

                @Html.Partial("~/Views/Partials/PageComponents/" + item.DocumentTypeAlias + ".cshtml", tabList)

                break;
            case "form":
                var form = new FormViewModel
                {
                    Heading = item.GetPropertyValue<string>("heading"),
                    FormName = item.GetPropertyValue<string>("form"),
                    PageName = Model.Name,
                    AdditionalClass = "",
                    WrapClasses = "o-wrap o-wrap--" + wrapSize
                };

                @Html.Partial("~/Views/Partials/PageComponents/Form.cshtml", form)
                break;
			case "button":
				var cta = new LinkPickerModel(item.GetPropertyValue<string>("link"));

				if(!String.IsNullOrWhiteSpace(cta.Url) || !string.IsNullOrWhiteSpace(cta.Hashtarget))
				{
					var ctaLink = cta.Url + cta.Hashtarget;
			        var ctaText = !String.IsNullOrWhiteSpace(cta.Name) ? cta.Name : "Find out more";
					<a href="@ctaLink" title="@cta.Name" target="@cta.Target" class="c-button c-button--primary">@cta.Name</a>
				}
                break;
            default:
                @NoResult(item)
                break;
        }

        if (wrapInExtraDiv)
        {
            @Html.Raw("</div>")
        }
    }
}

@helper NoResult(IPublishedContent item)
{
    <p>Element with DocumentTypeAlias <strong>@item.DocumentTypeAlias</strong> has no case in the switch statement.</p>
}
